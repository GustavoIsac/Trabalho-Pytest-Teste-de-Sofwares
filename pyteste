import pytest
from mainTrabalho import *  

@pytest.fixture(autouse=True)
def resetar_sistema():
    resetar()

def testaCriarUsuarioValido():
    criar_usuario("Gleison")
    assert usuarios[0] == {
        'id': 1, 'nome': 'Gleison', 'seguidores': [], 'seguindo': []
    }

def testaCriarUsuarioSemNome():
    with pytest.raises(Exception):
        criar_usuario("")  # Nome vazio


def testaCriarPostagemValida():
    criar_usuario("Maria")
    criar_postagem(1, "Olá Mundo")
    assert postagens[0] == {
        'id': 1, 'usuario': 1, 'mensagem': 'Olá Mundo', 'curtidores': [], 'comentarios': []
    }

def testaCriarPostagemTextoEmBranco():
    criar_usuario('Arthur')
    with pytest.raises(Exception):
        criar_postagem(1, "")  # Texto vazio

def testaCriarPostagemUsuarioInexistente():
    with pytest.raises(IndexError):
        criar_postagem(999, "Postagem de usuário inexistente")



def testaSeguirUsuarioExistente():
    criar_usuario('Gleison')
    criar_usuario('Karen')
    seguir_usuario(1, 2)
    assert usuarios[0]['seguindo'] == [2]
    assert usuarios[1]['seguidores'] == [1]

def testaSeguirUsuarioInexistente():
    criar_usuario('Gleison')
    with pytest.raises(IndexError):
        seguir_usuario(1, 999)  # Usuário inexistente

def testaSeguirMesmoUsuario():
    criar_usuario('Gleison')
    with pytest.raises(Exception):
        seguir_usuario(1, 1)  # Não pode seguir a si mesmo

def testaCurtirPostagemValida():
    criar_usuario('Gleison')
    criar_usuario('José')
    criar_postagem(1, 'Acorda povo!')
    curtir_postagem(2, 1)
    assert postagens[0]['curtidores'] == [2]

def curtir_postagem(usuario, postagem):
    try:
        postagem = encontrar_postagem_por_id(postagem)
        if usuario in postagem['curtidores']:
            raise Exception("Você já curtiu esta postagem")
        postagem['curtidores'].append(usuario)
    except IndexError:
        raise IndexError("Postagem não encontrada")

def testaComentarPostagemValido():
    criar_usuario('Gleison')
    criar_postagem(1, 'Postagem importante!')
    comentar_postagem(1, 1, 'Muito bom!')
    assert postagens[0]['comentarios'] == [{'usuario': 1, 'texto': 'Muito bom!'}]

def testaCurtirPostagemNovamente():
    criar_usuario('Gleison')
    criar_usuario('José')
    criar_postagem(1, 'Adoro testar!')
    curtir_postagem(2, 1)
    with pytest.raises(Exception):
        curtir_postagem(2, 1) 

def testaCurtirPostagemInexistente():
    criar_usuario('Gleison')
    criar_postagem(1, 'Postagem válida')

    with pytest.raises(IndexError):
        curtir_postagem(1, 999) 

def testaComentarPostagemValida():
    criar_usuario('Gleison')
    with pytest.raises(IndexError):
        comentar_postagem(1, 999, 'Comentando em uma postagem inexistente')  # Postagem não existente

def testaComentarTextoEmBranco():
    criar_usuario('Gleison')
    criar_postagem(1, 'Postagem importante!')

    with pytest.raises(ValueError):
        comentar_postagem(1, 1, '')  # Texto vazio no comentário

def testaExcluirContaValido():
    resetar()
    criar_usuario('Lucas')
    criar_usuario('Jose')
    criar_postagem(1, 'Postagem de Lucas')
    
    # Excluir a conta do usuário Lucas
    excluir_conta(1)

    # Validar que o usuário Lucas foi removido
    with pytest.raises(IndexError):
        encontrar_usuario_por_id(1)
    
    # Validar que a postagem de Lucas foi removida
    assert len(postagens) == 0

# Testes existentes...
